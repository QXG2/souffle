<map id="souffle::EquivalenceRelation&lt; TupleType &gt;::iterator" name="souffle::EquivalenceRelation&lt; TupleType &gt;::iterator">
<area shape="rect" id="node3" href="$classsouffle_1_1_piggy_list.html" title="{souffle::PiggyList\&lt; T \&gt;\n||+ append()\l+ begin()\l+ clear()\l+ createNode()\l+ end()\l+ freeList()\l+ get()\l+ getBlock()\l+ operator=()\l+ PiggyList()\l+ PiggyList()\l+ PiggyList()\l+ PiggyList()\l+ size()\l+ ~PiggyList()\l}" alt="" coords="157,243,311,525"/>
<area shape="rect" id="node15" href="$classsouffle_1_1_random_insert_piggy_list.html" title="{souffle::RandomInsertPiggy\lList\&lt; value_type \&gt;\n||+ clear()\l+ freeList()\l+ get()\l+ getBlock()\l+ insertAt()\l+ operator=()\l+ operator=()\l+ RandomInsertPiggyList()\l+ RandomInsertPiggyList()\l+ RandomInsertPiggyList()\l+ RandomInsertPiggyList()\l+ size()\l+ ~RandomInsertPiggyList()\l}" alt="" coords="456,250,643,518"/>
<area shape="rect" id="node19" href="$classsouffle_1_1_piggy_list.html" title="{souffle::PiggyList\l\&lt; std::atomic\&lt; block_t \&gt; \&gt;\n||+ append()\l+ begin()\l+ clear()\l+ createNode()\l+ end()\l+ freeList()\l+ get()\l+ getBlock()\l+ operator=()\l+ PiggyList()\l+ PiggyList()\l+ PiggyList()\l+ PiggyList()\l+ size()\l+ ~PiggyList()\l}" alt="" coords="925,235,1101,533"/>
<area shape="rect" id="node6" href="$classsouffle_1_1_spin_lock.html" title="A &#39;sequential&#39; non&#45;locking implementation for a spin lock. " alt="" coords="420,6,543,127"/>
<area shape="rect" id="node8" href="$classsouffle_1_1_equivalence_relation.html" title="{souffle::EquivalenceRelation\l\&lt; TupleType \&gt;\n||+ anteriorIt()\l+ antpostit()\l+ begin()\l+ clear()\l+ closure()\l+ contains()\l+ emptyPartition()\l+ end()\l+ EquivalenceRelation()\l+ extend()\land 10 more...\l# containsElement()\l&#45; genAllDisjointSetLists()\l}" alt="" coords="734,1353,921,1621"/>
<area shape="rect" id="node9" href="$classsouffle_1_1shared__mutex.html" title="{souffle::shared_mutex\n||+ lock()\l+ lock_shared()\l+ shared_mutex()\l+ try_lock()\l+ try_lock_shared()\l+ unlock()\l+ unlock_shared()\l}" alt="" coords="1029,1056,1179,1221"/>
<area shape="rect" id="node13" href="$classsouffle_1_1_sparse_disjoint_set.html" title="{souffle::SparseDisjointSet\l\&lt; value_type \&gt;\n||+ clear()\l+ contains()\l+ findNode()\l+ makeNode()\l+ nodeExists()\l+ operator=()\l+ operator=()\l+ sameSet()\l+ size()\l+ SparseDisjointSet()\l+ SparseDisjointSet()\l+ SparseDisjointSet()\l+ toDense()\l+ toSparse()\l+ unionNodes()\l}" alt="" coords="741,990,915,1287"/>
<area shape="rect" id="node18" href="$classsouffle_1_1_disjoint_set.html" title="Structure that emulates a Disjoint Set, i.e. " alt="" coords="835,598,968,895"/>
</map>
