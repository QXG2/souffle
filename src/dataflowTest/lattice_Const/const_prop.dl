.enum Constant = {
	case Top,
	case Bot
}

.def leq(Constant, Constant): number {
    case (Bot, x)   => x,
    case _          => Top
}

//TODO
.def lub(Constant, Constant): Constant {
    case (Bot, x)   => x,
    case (x, Bot)   => x,
    case (x, y)	    => x=y ? x : Top
}

.def glb(Constant, Constant): Constant {
    case (Top, x)   => x,
    case (x, Top)   => x,
    case (x, y)	    => x=y ? x : Bot
}

.let Sign<> = (Bot, Top, leq, lub, glb)

// lattice relation
.lat A(x: symbol, s: Sign)
.input A
.lat B(x: symbol, s: Sign)
.input B
.lat C(x: symbol, s: Sign)
.input C
.lat D(x: symbol, s: Sign)
.input D
.lat R(x: symbol, s: Sign)
.output R

R(x, s) :- A(x, s), B(x, s), C(x, s).
A(x, s) :- R(x, s), B(x, s).
R(x, s) :- A(x, s), D(x, s).
R(x, s) :- A(x, s), C(x, s).

// normal relation
.decl P(x: symbol, s: symbol)
.input P
.decl Q(x: symbol, s: symbol)
.input Q
.decl S(x: symbol, s: symbol)
.output S
S(x, s) :- P(x, s), Q(x, s).
P(x, s) :- S(x, s).
Q(x, s) :- P(x, s).
