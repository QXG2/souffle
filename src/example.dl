.enum Sign {
              case Top,

    case Neg, case Zer, case Pos,

              case Bot
}

.def leq(e1: Sign, e2: Sign): number {
    case (Bot, _)   => 1
    case (Neg, Neg) => 1
    case (Zer, Zer) => 1
    case (Pos, Pos) => 1
    case (_, Top)   => 1
    case _          => 0
}

.def lub(Sign, Sign): Sign {
    case (Bot, x)   => x
    case (x, Bot)   => x
    case (Neg, Neg) => Neg
    case (Zer, Zer) => Zer
    case (Pos, Pos) => Pos
    case _          => Top
}

.def glb(Sign, Sign): Sign {
    case (Top, x)   => x
    case (x, Top)   => x
    case (Neg, Neg) => Neg
    case (Zer, Zer) => Zer
    case (Pos, Pos) => Pos
    case _          => Bot
}

.let Sign<> = (Bot, Top, leq, lub, glb)

.lat A(x: Str, s: Sign)
.lat B(x: Str, s: Sign)
.lat R(x: Str, s: Sign)

A("a", Pos).
A("b", Neg).
B("a", Top).

R("c", s) :- A("a", s).
R("c", s) :- A("b", s).
R("d", s) :- A(x, s), B(x, s).
